{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template creates an S3 Bucket and a File Storage Gateway mapping to the S3 bucket",
	"Parameters": {
        "StorageBucket" :{
            "Type": "String",
            "Description": "Bucket to create for file storage",
            "AllowedPattern": "^([a-z]|(\\d(?!\\d{0,2}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})))([a-z\\d]|(\\.(?!(\\.|-)))|(-(?!\\.))){1,61}[a-z\\d\\.]$",
            "Default": "uipath-storage-bucket",
            "ConstraintDescription" : "Should be a Valid S3 Bucket Name"
        },
        "SubnetIDs": {
            "Description": "Comma separated Subnet IDs where Gateway VMs need to be launched",
            "Type": "CommaDelimitedList"
        },
        "GatewaySecurityGroup": {
            "Description": "Security Group behind which Storage Gateway VMs would be placed",
            "Type": "String"
        },
        "FileShareIAMRole": {
            "Description": "IAM Role to be attached to NFS File Share",
            "Type": "String"
        },
        "KeyPairName"   : {
            "Description": "EC2 Instance Key pair name",
            "Type": "String"
        },
        "GatewayName": {
            "Description": "SName of Stirage Gateway",
            "Type": "String"            
        },        
        "GatewayTimezone": {
            "Description": "Timezone to choose for File Gateway",
            "Type": "String"            
        },
        "CustomLambdaRoleArn": {
            "Description": "ARN for IAM Role to be assumed by Lambda functinos creating Storage Gateway custom resources",
            "Type": "String"
        }                          		
    }, 
    "Mappings" : {
        "RegionMap" : {
          "eu-north-1    ": {"GatewayAMI" : "ami-067021c6c213bc18c"},
          "ap-south-1    ": {"GatewayAMI" : "ami-00b39cb984abcf7a5"},
          "eu-west-3     ": {"GatewayAMI" : "ami-0854d00f6cf62b610"},
          "eu-west-2     ": {"GatewayAMI" : "ami-09e094b464a94256f"},
          "eu-west-1     ": {"GatewayAMI" : "ami-0c272dce1c089a306"},
          "ap-northeast-2": {"GatewayAMI" : "ami-0e97cbed11ad41ecb"},
          "ap-northeast-1": {"GatewayAMI" : "ami-0d21cb1b750ea098e"},
          "sa-east-1     ": {"GatewayAMI" : "ami-06dddf863e1ad7fd6"},
          "ca-central-1  ": {"GatewayAMI" : "ami-06952523be5453b27"},
          "ap-southeast-1": {"GatewayAMI" : "ami-09c48f03b7936f5ab"},
          "ap-southeast-2": {"GatewayAMI" : "ami-0fa14693d3879c977"},
          "eu-central-1  ": {"GatewayAMI" : "ami-0b994cd0e9d642d82"},
          "us-east-1     ": {"GatewayAMI" : "ami-0c38bb1899ad0b177"},
          "us-east-2     ": {"GatewayAMI" : "ami-0859f19661167ba58"},
          "us-west-1     ": {"GatewayAMI" : "ami-0789969abc7d40293"},
          "us-west-2     ": {"GatewayAMI" : "ami-08ebd155179e1a64b"}          
        }
    },
    "Conditions": {
        "1AZCondition": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        { "Fn::Select" : [ "0", { "Fn::Split": [",", {"Ref": "SubnetIDs"}]}] },
                        "-"
                    ]
                }
            ]            
        },
        "2AZCondition": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        { "Fn::Select" : [ "1", { "Fn::Split": [",", {"Ref": "SubnetIDs"}]}] },
                        "-"
                    ]
                }
            ]            
        },
        "3AZCondition": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        { "Fn::Select" : [ "2", { "Fn::Split": [",", {"Ref": "SubnetIDs"}]}] },
                        "-"
                    ]
                }
            ]            
        }                
    },           
	"Resources": {
		"S3Bucket": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"BucketName" : {"Ref": "StorageBucket"},
				"PublicAccessBlockConfiguration" : {
					"BlockPublicAcls" : true,
					"BlockPublicPolicy" : true,
					"IgnorePublicAcls" : true,
					"RestrictPublicBuckets" : true
				},
				"VersioningConfiguration": {
					"Status": "Enabled"
				}
				
			}
        },
        "Gateway": {
            "Type" : "AWS::EC2::Instance",
            "Properties" : {
                "BlockDeviceMappings" : [ 
                    {
                        "DeviceName" : "/dev",
                        "Ebs" : {
                            "DeleteOnTermination" : true,
                            "Encrypted" : false,
                            "VolumeSize" : 150,
                            "VolumeType" : "gp2"
                        }
                    } 
                ],
                "EbsOptimized" : true,
                "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "GatewayAMI"]},
                "InstanceType" : "m4.xlarge",
                "KeyName" : {"Ref": "KeyPairName"},
                "SecurityGroupIds" : [ {"Ref": "GatewaySecurityGroup"} ],
                "SubnetId" : { "Fn::Select" : [ "0", { "Fn::Split": [",", {"Ref": "SubnetIDs"}]}] },
                "Tags" : [ { "Key": "Name", "Value": "UIPath Storage Gateway VM 1" } ],
                "Tenancy" : "default"
            }
        },
        "ActivateGatewayFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description" : "Activates a Storage Gateway",
                "Handler": "index.handler",
                "Role": {"Ref" : "CustomLambdaRoleArn"},
                "Code": {
                    "ZipFile" : { "Fn::Join" : ["\n", [
                        "import time",
                        "import boto3",
                        "import shlex",
                        "import subprocess",
                        "import cfnresponse",
                        "from datetime import datetime",
                        "from dateutil import tz",
                        "ec2 = boto3.client('ec2')",
                        "gatewayClient = boto3.client('storagegateway')",
                        "def create(properties, physical_id):",
                        "    instanceId = properties['InstanceId']",
                        "    instanceIP = properties['InstanceIP']",
                        "    instanceRegion = properties['InstanceRegion']",
                        "    gatewayName = properties['GatewayName']",
                        "    gatewayTimezone = properties['GatewayTimezone']",
                        "    gatewayTimezoneOffset = f'{zone[0:3]}:{zone[3:5]}'",
                        "    zone=datetime.now(tz.gettz(gatewayTimezone)).strftime('%z')",
                        "    instancestatuses = ec2.describe_instance_status(InstanceIds=[instanceId])['InstanceStatuses']",
                        "    while len(instancestatuses) <= 0:",
                        "        instancestatuses = ec2.describe_instance_status(InstanceIds=[instanceId])['InstanceStatuses']",
                        "        print(f'Waiting for Instance-{instanceId} to be launched ...')",
                        "        time.sleep(10)",
                        "    instancedetails = instancestatuses[0]['InstanceStatus']['Details'][0]['Status']",
                        "    systemstatus = instancestatuses[0]['SystemStatus']['Status']",
                        "    while instancedetails != 'passed' and systemstatus != 'ok':",
                        "        instancestatuses = ec2.describe_instance_status(InstanceIds=[instanceId])['InstanceStatuses']",
                        "        instancedetails = instancestatuses[0]['InstanceStatus']['Details'][0]['Status']",
                        "        systemstatus = instancestatuses[0]['SystemStatus']['Status']",
                        "        print(f'Waiting for Instance-{instanceId} to pass status check ...')",
                        "        time.sleep(30)",                       
                        "    print('Retrieving activation key ...')",
                        "    cmd = f\"wget '{instanceIP}/?activationRegion={instanceRegion}'\"",
                        "    command = shlex.split(cmd)",
                        "    activationKey=''",
                        "    try:",
                        "        output = subprocess.check_output(command, stderr=subprocess.STDOUT).decode()",
                        "        activationKey = output[output.find('activationKey=')+14:output.find('activationKey=')+43]",
                        "    except subprocess.CalledProcessError as e:",
                        "        output = e.output.decode()",
                        "    print(f'Activation Key={activationKey}')",
                        "    gatewayARN = gatewayClient.activate_gateway(",
                        "        ActivationKey=activationKey,",
                        "        GatewayName=gatewayName,",
                        "        GatewayTimezone=f'GMT{gatewayTimezoneOffset}',",
                        "        GatewayRegion=instanceRegion,",
                        "        GatewayType='FILE_S3'",
                        "    )['GatewayARN']",
                        "    print(f'Gateway ARN = {gatewayARN}, Gateway Name = {gatewayName}')",
                        "    returnAttribute = {}",
                        "    returnAttribute['Arn'] = gatewayARN",
                        "    returnAttribute['Name'] = gatewayName",
                        "    returnAttribute['Action'] = CREATE",
                        "    return cfnresponse.SUCCESS, gatewayARN, returnAttribute",
                        "def update(properties, physical_id):",
                        "    gatewayARN = physical_id",
                        "    gatewayName = properties['GatewayName']",
                        "    gatewayTimezone = properties['GatewayTimezone']",
                        "    gatewayTimezoneOffset = f'{zone[0:3]}:{zone[3:5]}'",
                        "    gatewayName = gatewayClient.update_gateway_information(",
                        "        GatewayARN=gatewayARN,",                        
                        "        GatewayName=gatewayName,",
                        "        GatewayTimezone=f'GMT{gatewayTimezoneOffset}'",
                        "    )['GatewayName']", 
                        "    print(f'Gateway ARN = {gatewayARN}, Gateway Name = {gatewayName}')",   
                        "    returnAttribute = {}",
                        "    returnAttribute['Arn'] = gatewayARN",
                        "    returnAttribute['Name'] = gatewayName",                                                                   
                        "    returnAttribute['Action'] = UPDATE",
                        "    return cfnresponse.SUCCESS, gatewayARN, returnAttribute",
                        "def delete(properties, physical_id):",
                        "    gatewayARN = physical_id",
                        "    gatewayARN = gatewayClient.delete_gateway(",
                        "        GatewayARN=gatewayARN,",
                        "    )['GatewayARN']",                        
                        "    returnAttribute = {}",
                        "    returnAttribute['Arn'] = gatewayARN",
                        "    returnAttribute['Name'] = gatewayName",                                                                   
                        "    returnAttribute['Action'] = DELETE",
                        "    return cfnresponse.SUCCESS, gatewayARN, returnAttribute",
                        "def handler(event, context):",
                        "    print('Received event: ' + json.dumps(event))",
                        "    status = cfnresponse.FAILED",
                        "    new_physical_id = None",
                        "    try:",
                        "        properties = event.get('ResourceProperties')",
                        "        physical_id = event.get('PhysicalResourceId')",
                        "        status, new_physical_id, returnAttribute = {",
                        "            'Create': create,",
                        "            'Update': update,",
                        "            'Delete': delete",
                        "        }.get(event['RequestType'], lambda x, y: (cfnresponse.FAILED, None))(properties, physical_id)",
                        "    except Exception as e:",
                        "        print('Exception: ' + e)",
                        "        status = cfnresponse.FAILED",
                        "    finally:",
                        "        cfnresponse.send(event, context, status, returnAttribute, new_physical_id)"
                    ]]}
                },
                "Runtime": "python3.6",
                "Timeout": 30,
                "TracingConfig": {
                    "Mode": "Active"
                }
            }
        },
		"StorageGateway": {
            "Type": "Custom::StorageGateway",
            "Properties": {
                    "ServiceToken": { "Fn::GetAtt" : ["ActivateGatewayFunction", "Arn"] },
                    "InstanceId": {"Ref" : "Gateway"},
                    "InstanceIP": {  "Fn::GetAtt": [ "Gateway", "PublicIp" ] },
                    "InstanceRegion": { "Ref" : "AWS::Region" },
                    "GatewayName": {"Ref" : "GatewayName"},
                    "GatewayTimezone": {"Ref" : "GatewayTimezone"}
            }
        }                	        
	},
	"Outputs": {
        "StorageBucketARN": {
            "Value": {"Fn::GetAtt" : ["S3Bucket", "Arn"]},
            "Description": "Storage Bucket ARN"
        },
        "GatewayVMID": {
            "Value": {"Ref" : "Gateway"},
            "Description": "ID of Gateway VM in Public Subnet 1"
        },
        "GatewayVMPublicIP": {
            "Value": {  "Fn::GetAtt": [ "Gateway", "PublicIp" ] },
            "Description": "Public IP of Gateway VM in Public Subnet 1"
		}         					
	}    
}