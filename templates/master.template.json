{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template creates a Multi-AZ, multi-subnet VPC infrastructure with UIPath Orchestrator deployed in private Subnets, with an ALB behind a Route53 in public subnets",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Availability Zone Configuration"
                    },
                    "Parameters": [
                        "AvailabilityZones",
                        "NumberOfAZs"
                    ]
                },
                {
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "VPCCIDR",
                        "PublicSubnetTag1",
                        "PublicSubnetTag2",
                        "PublicSubnetTag3",
                        "PrivateSubnetTag1",
                        "PrivateSubnetTag2",
                        "PrivateSubnetTag3"
                    ]
                },
                {
                    "Label": {
                        "default": "Orchestrator Instance Configuration"
                    },
                    "Parameters": [
                        "KeyPairName",
                        "InstanceType"
                    ]
                },
                {
                    "Label": {
                        "default": "Storage Gateway Configuration"
                    },
                    "Parameters": [
                        "StorageBucket",
                        "GatewayName",
                        "GatewayTimezone"
                    ]
                },  
                {
                    "Label": {
                        "default": "Domain Configuration"
                    },
                    "Parameters": [
                        "Domain"
                    ]
                }, 
                {
                    "Label": {
                        "default": "High Availability Configuration"
                    },
                    "Parameters": [
                        "HAAUser",
                        "HAAPassword",
                        "HAALicense"
                    ]
                },  
                {
                    "Label": {
                        "default": "RDS Database Configuration"
                    },
                    "Parameters": [
                        "RDSDBName",
                        "RDSAllocatedStorage",
                        "RDSUsername",
                        "RDSPassword"
                    ]
                },    
                {
                    "Label": {
                        "default": "Orchestrator Server Configuration"
                    },
                    "Parameters": [
                        "OrchestratorVersion",
                        "OrchestratorInstanceCount",
                        "OrchestratorLicense",
                        "OrchestratorPassPhrase",
                        "OrchestratorPassword",
                        "AdminPassword"
                    ]
                },                                                                             
                {
                    "Label": {
                        "default": "Quickstart Bucket configuration"
                    },
                    "Parameters": [
                        "QSS3BucketName",
                        "QSS3KeyPrefix"
                    ]
                }                                                                                    
            ],
            "ParameterLabels": {
                "AvailabilityZones": {
                    "default": "Availability Zone(s) selection"
                },
                "NumberOfAZs": {
                    "default": "Number of AZs to use"
                },
                "VPCCIDR": {
                    "default": "VPC CIDR"
                },                   
                "PrivateSubnetTag1": {
                    "default": "Private subnet 1 tag"
                },      
                "PrivateSubnetTag2": {
                    "default": "Private subnet 2 tag"
                },         
                "PrivateSubnetTag3": {
                    "default": "Private subnet 3 tag"
                },                    
                "PublicSubnetTag1": {
                    "default": "Public subnet 1 tag"
                },  
                "PublicSubnetTag2": {
                    "default": "Public subnet 2 tag"
                },      
                "PublicSubnetTag3": {
                    "default": "Public subnet 3 tag"
                },                                                                      
                "KeyPairName": {
                    "default": "Instance Key pair"
                },
                "InstanceType": {
                    "default": "Instance type"
                },
                "StorageBucket": {
                    "default": "Bucket to create for file storage"
                },  
                "GatewayName": {
                    "deafult": "Storage Gateway"
                },                                             
                "Domain": {
                    "deafult": "Hosting FQDN"
                },
                "HAAUser": {
                    "default": "HA Addon Username"
                },
                "HAAPassword": {
                    "default": "HA Addon Password"
                }, 
                "HAALicense": {
                    "default": "HA Addon License Key"
                },
                "RDSDBName": {
                    "default": "RDS Database Name"
                },         
                "RDSAllocatedStorage": {
                    "default": "RDS Allocated Storage"
                },
                "RDSUsername": {
                    "default": "DB Username"
                },     
                "RDSPassword": {
                    "default": "DB Password"
                },                    
                "OrchestratorVersion": {
                    "default": "Orchestrator Version Number"
                },
                "OrchestratorInstanceCount": {
                    "default": "Orchestrator Instance Count"
                },                      
                "OrchestratorLicense": {
                    "default": "Orchestrator License Key"
                },         
                "OrchestratorPassPhrase": {
                    "default": "Orchestrator Pass Phrase"
                },  
                "OrchestratorPassword": {
                    "default": "Orchestrator Password"
                },
                "AdminPassword": {
                    "default": "Admin Password"
                },                                              
                "QSS3BucketName": {
                    "default": "Template hosting Bucket"
                },
                "QSS3KeyPrefix": {
                    "default": "Template folder"
                }                                                                                                                                                                                         
            }
        }
    },
    "Parameters": {       
        "AvailabilityZones": {
            "Description": "List of Availability Zones to use for the subnets in the VPC - maximum of 3 AZs are used for this deployment (logical order of your selections is preserved).",
            "Type": "List<AWS::EC2::AvailabilityZone::Name>"
        },
        "NumberOfAZs": {
            "AllowedValues": [
                "2",
                "3"
            ],
            "Default": "2",
            "Description": "Number of Availability Zones to use in the VPC (upto 3), must match your selections in the list of Availability Zones parameter.",
            "Type": "String"
        }, 
        "VPCCIDR": {
            "AllowedPattern": "^([0-9]{1,3}\\.){2}([0]{1}.)[0]{1}(\\/[16]{2})$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.0.0/16",
            "Default": "10.0.0.0/16",
            "Description": "CIDR block for the VPC, must be in the form x.x.0.0/16.",
            "Type": "String"
        },
        "PrivateSubnetTag1": {
            "AllowedPattern": "^([a-zA-Z0-9+\\-._:/@]+=[a-zA-Z0-9+\\-.,_:/@ *\\\\\"'\\[\\]\\{\\}]*)?$",
            "ConstraintDescription": "tags must be in format \"Key=Value\" keys can only contain [a-zA-Z0-9+\\-._:/@], values can contain [a-zA-Z0-9+\\-._:/@ *\\\\\"'\\[\\]\\{\\}]",
            "Default": "Network=Private1",
            "Description": "Tag to add to private subnet 1 in format Key=Value (Optional).",
            "Type": "String"
        },
        "PrivateSubnetTag2": {
            "AllowedPattern": "^([a-zA-Z0-9+\\-._:/@]+=[a-zA-Z0-9+\\-.,_:/@ *\\\\\"'\\[\\]\\{\\}]*)?$",
            "ConstraintDescription": "tags must be in format \"Key=Value\" keys can only contain [a-zA-Z0-9+\\-._:/@], values can contain [a-zA-Z0-9+\\-._:/@ *\\\\\"'\\[\\]\\{\\}]",
            "Default": "Network=Private2",
            "Description": "Tag to add to private subnet 2 in format Key=Value (Optional).",
            "Type": "String"
        },
        "PrivateSubnetTag3": {
            "AllowedPattern": "^([a-zA-Z0-9+\\-._:/@]+=[a-zA-Z0-9+\\-.,_:/@ *\\\\\"'\\[\\]\\{\\}]*)?$",
            "ConstraintDescription": "tags must be in format \"Key=Value\" keys can only contain [a-zA-Z0-9+\\-._:/@], values can contain [a-zA-Z0-9+\\-._:/@ *\\\\\"'\\[\\]\\{\\}]",
            "Default": "Network=Private3",
            "Description": "Tag to add to private subnet 3 in format Key=Value (Optional).",
            "Type": "String"
        },            
        "PublicSubnetTag1": {
            "AllowedPattern": "^([a-zA-Z0-9+\\-._:/@]+=[a-zA-Z0-9+\\-.,_:/@ *\\\\\"'\\[\\]\\{\\}]*)?$",
            "ConstraintDescription": "tags must be in format \"Key=Value\" keys can only contain [a-zA-Z0-9+\\-._:/@], values can contain [a-zA-Z0-9+\\-._:/@ *\\\\\"'\\[\\]\\{\\}]",
            "Default": "Network=Public1",
            "Description": "Tag to add to public subnet 1 in format Key=Value (Optional)",
            "Type": "String"
        },
        "PublicSubnetTag2": {
            "AllowedPattern": "^([a-zA-Z0-9+\\-._:/@]+=[a-zA-Z0-9+\\-.,_:/@ *\\\\\"'\\[\\]\\{\\}]*)?$",
            "ConstraintDescription": "tags must be in format \"Key=Value\" keys can only contain [a-zA-Z0-9+\\-._:/@], values can contain [a-zA-Z0-9+\\-._:/@ *\\\\\"'\\[\\]\\{\\}]",
            "Default": "Network=Public2",
            "Description": "Tag to add to public subnet 2 in format Key=Value (Optional).",
            "Type": "String"
        },
        "PublicSubnetTag3": {
            "AllowedPattern": "^([a-zA-Z0-9+\\-._:/@]+=[a-zA-Z0-9+\\-.,_:/@ *\\\\\"'\\[\\]\\{\\}]*)?$",
            "ConstraintDescription": "tags must be in format \"Key=Value\" keys can only contain [a-zA-Z0-9+\\-._:/@], values can contain [a-zA-Z0-9+\\-._:/@ *\\\\\"'\\[\\]\\{\\}]",
            "Default": "Network=Public3",
            "Description": "Tag to add to public subnet 3 in format Key=Value (Optional).",
            "Type": "String"
        },                        
        "KeyPairName": {
            "Description": "Existing Key Pair, which is to be used to Log in to VM instances.",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },   
        "InstanceType": {
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "r4.large",
                "r4.xlarge",
                "r4.2xlarge",
                "r4.4xlarge",
                "r4.8xlarge"
            ],
            "ConstraintDescription": "Class of instance, must be a valid EC2 instance type from the list.",
            "Default": "t2.medium",
            "Description": "EC2 instance type",
            "Type": "String"
        },                
        "StorageBucket" :{
            "Type": "String",
            "Description": "S3 Bucket name storing UIPath files from Storage Gateway, should be a Valid S3 Bucket Name.",
            "AllowedPattern": "^([a-z]|(\\d(?!\\d{0,2}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})))([a-z\\d]|(\\.(?!(\\.|-)))|(-(?!\\.))){1,61}[a-z\\d\\.]$",
            "ConstraintDescription" : "Bucket to be used to store files for syncing with gateway, should be a Valid S3 Bucket Name"
        }, 
        "GatewayName": {
            "Description": "Name of S3 File Storage Gateway.",
            "Type": "String",
            "Default": "uipathgateway"            
        },
        "GatewayTimezone": {
            "Description": "Timezone to choose for File Gateway",
            "Type": "String",
            "AllowedValues": [
                "Africa/Abidjan",
                "Africa/Accra",
                "Africa/Addis_Ababa",
                "Africa/Algiers",
                "Africa/Asmara",
                "Africa/Asmera",
                "Africa/Bamako",
                "Africa/Bangui",
                "Africa/Banjul",
                "Africa/Bissau",
                "Africa/Blantyre",
                "Africa/Brazzaville",
                "Africa/Bujumbura",
                "Africa/Cairo",
                "Africa/Casablanca",
                "Africa/Ceuta",
                "Africa/Conakry",
                "Africa/Dakar",
                "Africa/Dar_es_Salaam",
                "Africa/Djibouti",
                "Africa/Douala",
                "Africa/El_Aaiun",
                "Africa/Freetown",
                "Africa/Gaborone",
                "Africa/Harare",
                "Africa/Johannesburg",
                "Africa/Juba",
                "Africa/Kampala",
                "Africa/Khartoum",
                "Africa/Kigali",
                "Africa/Kinshasa",
                "Africa/Lagos",
                "Africa/Libreville",
                "Africa/Lome",
                "Africa/Luanda",
                "Africa/Lubumbashi",
                "Africa/Lusaka",
                "Africa/Malabo",
                "Africa/Maputo",
                "Africa/Maseru",
                "Africa/Mbabane",
                "Africa/Mogadishu",
                "Africa/Monrovia",
                "Africa/Nairobi",
                "Africa/Ndjamena",
                "Africa/Niamey",
                "Africa/Nouakchott",
                "Africa/Ouagadougou",
                "Africa/Porto-Novo",
                "Africa/Sao_Tome",
                "Africa/Timbuktu",
                "Africa/Tripoli",
                "Africa/Tunis",
                "Africa/Windhoek",
                "America/Adak",
                "America/Anchorage",
                "America/Anguilla",
                "America/Antigua",
                "America/Araguaina",
                "America/Argentina/Buenos_Aires",
                "America/Argentina/Catamarca",
                "America/Argentina/ComodRivadavia",
                "America/Argentina/Cordoba",
                "America/Argentina/Jujuy",
                "America/Argentina/La_Rioja",
                "America/Argentina/Mendoza",
                "America/Argentina/Rio_Gallegos",
                "America/Argentina/Salta",
                "America/Argentina/San_Juan",
                "America/Argentina/San_Luis",
                "America/Argentina/Tucuman",
                "America/Argentina/Ushuaia",
                "America/Aruba",
                "America/Asuncion",
                "America/Atikokan",
                "America/Atka",
                "America/Bahia",
                "America/Bahia_Banderas",
                "America/Barbados",
                "America/Belem",
                "America/Belize",
                "America/Blanc-Sablon",
                "America/Boa_Vista",
                "America/Bogota",
                "America/Boise",
                "America/Buenos_Aires",
                "America/Cambridge_Bay",
                "America/Campo_Grande",
                "America/Cancun",
                "America/Caracas",
                "America/Catamarca",
                "America/Cayenne",
                "America/Cayman",
                "America/Chicago",
                "America/Chihuahua",
                "America/Coral_Harbour",
                "America/Cordoba",
                "America/Costa_Rica",
                "America/Creston",
                "America/Cuiaba",
                "America/Curacao",
                "America/Danmarkshavn",
                "America/Dawson",
                "America/Dawson_Creek",
                "America/Denver",
                "America/Detroit",
                "America/Dominica",
                "America/Edmonton",
                "America/Eirunepe",
                "America/El_Salvador",
                "America/Ensenada",
                "America/Fort_Wayne",
                "America/Fortaleza",
                "America/Glace_Bay",
                "America/Godthab",
                "America/Goose_Bay",
                "America/Grand_Turk",
                "America/Grenada",
                "America/Guadeloupe",
                "America/Guatemala",
                "America/Guayaquil",
                "America/Guyana",
                "America/Halifax",
                "America/Havana",
                "America/Hermosillo",
                "America/Indiana/Indianapolis",
                "America/Indiana/Knox",
                "America/Indiana/Marengo",
                "America/Indiana/Petersburg",
                "America/Indiana/Tell_City",
                "America/Indiana/Vevay",
                "America/Indiana/Vincennes",
                "America/Indiana/Winamac",
                "America/Indianapolis",
                "America/Inuvik",
                "America/Iqaluit",
                "America/Jamaica",
                "America/Jujuy",
                "America/Juneau",
                "America/Kentucky/Louisville",
                "America/Kentucky/Monticello",
                "America/Knox_IN",
                "America/Kralendijk",
                "America/La_Paz",
                "America/Lima",
                "America/Los_Angeles",
                "America/Louisville",
                "America/Lower_Princes",
                "America/Maceio",
                "America/Managua",
                "America/Manaus",
                "America/Marigot",
                "America/Martinique",
                "America/Matamoros",
                "America/Mazatlan",
                "America/Mendoza",
                "America/Menominee",
                "America/Merida",
                "America/Metlakatla",
                "America/Mexico_City",
                "America/Miquelon",
                "America/Moncton",
                "America/Monterrey",
                "America/Montevideo",
                "America/Montreal",
                "America/Montserrat",
                "America/Nassau",
                "America/New_York",
                "America/Nipigon",
                "America/Nome",
                "America/Noronha",
                "America/North_Dakota/Beulah",
                "America/North_Dakota/Center",
                "America/North_Dakota/New_Salem",
                "America/Ojinaga",
                "America/Panama",
                "America/Pangnirtung",
                "America/Paramaribo",
                "America/Phoenix",
                "America/Port_of_Spain",
                "America/Port-au-Prince",
                "America/Porto_Acre",
                "America/Porto_Velho",
                "America/Puerto_Rico",
                "America/Rainy_River",
                "America/Rankin_Inlet",
                "America/Recife",
                "America/Regina",
                "America/Resolute",
                "America/Rio_Branco",
                "America/Rosario",
                "America/Santa_Isabel",
                "America/Santarem",
                "America/Santiago",
                "America/Santo_Domingo",
                "America/Sao_Paulo",
                "America/Scoresbysund",
                "America/Shiprock",
                "America/Sitka",
                "America/St_Barthelemy",
                "America/St_Johns",
                "America/St_Kitts",
                "America/St_Lucia",
                "America/St_Thomas",
                "America/St_Vincent",
                "America/Swift_Current",
                "America/Tegucigalpa",
                "America/Thule",
                "America/Thunder_Bay",
                "America/Tijuana",
                "America/Toronto",
                "America/Tortola",
                "America/Vancouver",
                "America/Virgin",
                "America/Whitehorse",
                "America/Winnipeg",
                "America/Yakutat",
                "America/Yellowknife",
                "Antarctica/Casey",
                "Antarctica/Davis",
                "Antarctica/DumontDUrville",
                "Antarctica/Macquarie",
                "Antarctica/Mawson",
                "Antarctica/McMurdo",
                "Antarctica/Palmer",
                "Antarctica/Rothera",
                "Antarctica/South_Pole",
                "Antarctica/Syowa",
                "Antarctica/Vostok",
                "Arctic/Longyearbyen",
                "Asia/Aden",
                "Asia/Almaty",
                "Asia/Amman",
                "Asia/Anadyr",
                "Asia/Aqtau",
                "Asia/Aqtobe",
                "Asia/Ashgabat",
                "Asia/Ashkhabad",
                "Asia/Baghdad",
                "Asia/Bahrain",
                "Asia/Baku",
                "Asia/Bangkok",
                "Asia/Beirut",
                "Asia/Bishkek",
                "Asia/Brunei",
                "Asia/Calcutta",
                "Asia/Choibalsan",
                "Asia/Chongqing",
                "Asia/Chungking",
                "Asia/Colombo",
                "Asia/Dacca",
                "Asia/Damascus",
                "Asia/Dhaka",
                "Asia/Dili",
                "Asia/Dubai",
                "Asia/Dushanbe",
                "Asia/Gaza",
                "Asia/Harbin",
                "Asia/Hebron",
                "Asia/Ho_Chi_Minh",
                "Asia/Hong_Kong",
                "Asia/Hovd",
                "Asia/Irkutsk",
                "Asia/Istanbul",
                "Asia/Jakarta",
                "Asia/Jayapura",
                "Asia/Jerusalem",
                "Asia/Kabul",
                "Asia/Kamchatka",
                "Asia/Karachi",
                "Asia/Kashgar",
                "Asia/Kathmandu",
                "Asia/Katmandu",
                "Asia/Khandyga",
                "Asia/Kolkata",
                "Asia/Krasnoyarsk",
                "Asia/Kuala_Lumpur",
                "Asia/Kuching",
                "Asia/Kuwait",
                "Asia/Macao",
                "Asia/Macau",
                "Asia/Magadan",
                "Asia/Makassar",
                "Asia/Manila",
                "Asia/Muscat",
                "Asia/Nicosia",
                "Asia/Novokuznetsk",
                "Asia/Novosibirsk",
                "Asia/Omsk",
                "Asia/Oral",
                "Asia/Phnom_Penh",
                "Asia/Pontianak",
                "Asia/Pyongyang",
                "Asia/Qatar",
                "Asia/Qyzylorda",
                "Asia/Rangoon",
                "Asia/Riyadh",
                "Asia/Saigon",
                "Asia/Sakhalin",
                "Asia/Samarkand",
                "Asia/Seoul",
                "Asia/Shanghai",
                "Asia/Singapore",
                "Asia/Taipei",
                "Asia/Tashkent",
                "Asia/Tbilisi",
                "Asia/Tehran",
                "Asia/Tel_Aviv",
                "Asia/Thimbu",
                "Asia/Thimphu",
                "Asia/Tokyo",
                "Asia/Ujung_Pandang",
                "Asia/Ulaanbaatar",
                "Asia/Ulan_Bator",
                "Asia/Urumqi",
                "Asia/Ust-Nera",
                "Asia/Vientiane",
                "Asia/Vladivostok",
                "Asia/Yakutsk",
                "Asia/Yekaterinburg",
                "Asia/Yerevan",
                "Atlantic/Azores",
                "Atlantic/Bermuda",
                "Atlantic/Canary",
                "Atlantic/Cape_Verde",
                "Atlantic/Faeroe",
                "Atlantic/Faroe",
                "Atlantic/Jan_Mayen",
                "Atlantic/Madeira",
                "Atlantic/Reykjavik",
                "Atlantic/South_Georgia",
                "Atlantic/St_Helena",
                "Atlantic/Stanley",
                "Australia/ACT",
                "Australia/Adelaide",
                "Australia/Brisbane",
                "Australia/Broken_Hill",
                "Australia/Canberra",
                "Australia/Currie",
                "Australia/Darwin",
                "Australia/Eucla",
                "Australia/Hobart",
                "Australia/LHI",
                "Australia/Lindeman",
                "Australia/Lord_Howe",
                "Australia/Melbourne",
                "Australia/North",
                "Australia/NSW",
                "Australia/Perth",
                "Australia/Queensland",
                "Australia/South",
                "Australia/Sydney",
                "Australia/Tasmania",
                "Australia/Victoria",
                "Australia/West",
                "Australia/Yancowinna",
                "Brazil/Acre",
                "Brazil/DeNoronha",
                "Brazil/East",
                "Brazil/West",
                "Canada/Atlantic",
                "Canada/Central",
                "Canada/Eastern",
                "Canada/Mountain",
                "Canada/Newfoundland",
                "Canada/Pacific",
                "Canada/Saskatchewan",
                "Canada/Yukon",
                "CET",
                "Chile/Continental",
                "Chile/EasterIsland",
                "CST6CDT",
                "Cuba",
                "EET",
                "Egypt",
                "Eire",
                "EST",
                "EST5EDT",
                "Etc/GMT",
                "Etc/GMT+0",
                "Etc/GMT+1",
                "Etc/GMT+10",
                "Etc/GMT+11",
                "Etc/GMT+12",
                "Etc/GMT+2",
                "Etc/GMT+3",
                "Etc/GMT+4",
                "Etc/GMT+5",
                "Etc/GMT+6",
                "Etc/GMT+7",
                "Etc/GMT+8",
                "Etc/GMT+9",
                "Etc/GMT0",
                "Etc/GMT-0",
                "Etc/GMT-1",
                "Etc/GMT-10",
                "Etc/GMT-11",
                "Etc/GMT-12",
                "Etc/GMT-13",
                "Etc/GMT-14",
                "Etc/GMT-2",
                "Etc/GMT-3",
                "Etc/GMT-4",
                "Etc/GMT-5",
                "Etc/GMT-6",
                "Etc/GMT-7",
                "Etc/GMT-8",
                "Etc/GMT-9",
                "Etc/Greenwich",
                "Etc/UCT",
                "Etc/Universal",
                "Etc/UTC",
                "Etc/Zulu",
                "Europe/Amsterdam",
                "Europe/Andorra",
                "Europe/Athens",
                "Europe/Belfast",
                "Europe/Belgrade",
                "Europe/Berlin",
                "Europe/Bratislava",
                "Europe/Brussels",
                "Europe/Bucharest",
                "Europe/Budapest",
                "Europe/Busingen",
                "Europe/Chisinau",
                "Europe/Copenhagen",
                "Europe/Dublin",
                "Europe/Gibraltar",
                "Europe/Guernsey",
                "Europe/Helsinki",
                "Europe/Isle_of_Man",
                "Europe/Istanbul",
                "Europe/Jersey",
                "Europe/Kaliningrad",
                "Europe/Kiev",
                "Europe/Lisbon",
                "Europe/Ljubljana",
                "Europe/London",
                "Europe/Luxembourg",
                "Europe/Madrid",
                "Europe/Malta",
                "Europe/Mariehamn",
                "Europe/Minsk",
                "Europe/Monaco",
                "Europe/Moscow",
                "Europe/Nicosia",
                "Europe/Oslo",
                "Europe/Paris",
                "Europe/Podgorica",
                "Europe/Prague",
                "Europe/Riga",
                "Europe/Rome",
                "Europe/Samara",
                "Europe/San_Marino",
                "Europe/Sarajevo",
                "Europe/Simferopol",
                "Europe/Skopje",
                "Europe/Sofia",
                "Europe/Stockholm",
                "Europe/Tallinn",
                "Europe/Tirane",
                "Europe/Tiraspol",
                "Europe/Uzhgorod",
                "Europe/Vaduz",
                "Europe/Vatican",
                "Europe/Vienna",
                "Europe/Vilnius",
                "Europe/Volgograd",
                "Europe/Warsaw",
                "Europe/Zagreb",
                "Europe/Zaporozhye",
                "Europe/Zurich",
                "GB",
                "GB-Eire",
                "GMT",
                "GMT+0",
                "GMT0",
                "GMT-0",
                "Greenwich",
                "Hongkong",
                "HST",
                "Iceland",
                "Indian/Antananarivo",
                "Indian/Chagos",
                "Indian/Christmas",
                "Indian/Cocos",
                "Indian/Comoro",
                "Indian/Kerguelen",
                "Indian/Mahe",
                "Indian/Maldives",
                "Indian/Mauritius",
                "Indian/Mayotte",
                "Indian/Reunion",
                "Iran",
                "Israel",
                "Jamaica",
                "Japan",
                "Kwajalein",
                "Libya",
                "MET",
                "Mexico/BajaNorte",
                "Mexico/BajaSur",
                "Mexico/General",
                "MST",
                "MST7MDT",
                "Navajo",
                "NZ",
                "NZ-CHAT",
                "Pacific/Apia",
                "Pacific/Auckland",
                "Pacific/Chatham",
                "Pacific/Chuuk",
                "Pacific/Easter",
                "Pacific/Efate",
                "Pacific/Enderbury",
                "Pacific/Fakaofo",
                "Pacific/Fiji",
                "Pacific/Funafuti",
                "Pacific/Galapagos",
                "Pacific/Gambier",
                "Pacific/Guadalcanal",
                "Pacific/Guam",
                "Pacific/Honolulu",
                "Pacific/Johnston",
                "Pacific/Kiritimati",
                "Pacific/Kosrae",
                "Pacific/Kwajalein",
                "Pacific/Majuro",
                "Pacific/Marquesas",
                "Pacific/Midway",
                "Pacific/Nauru",
                "Pacific/Niue",
                "Pacific/Norfolk",
                "Pacific/Noumea",
                "Pacific/Pago_Pago",
                "Pacific/Palau",
                "Pacific/Pitcairn",
                "Pacific/Pohnpei",
                "Pacific/Ponape",
                "Pacific/Port_Moresby",
                "Pacific/Rarotonga",
                "Pacific/Saipan",
                "Pacific/Samoa",
                "Pacific/Tahiti",
                "Pacific/Tarawa",
                "Pacific/Tongatapu",
                "Pacific/Truk",
                "Pacific/Wake",
                "Pacific/Wallis",
                "Pacific/Yap",
                "Poland",
                "Portugal",
                "PRC",
                "PST8PDT",
                "ROK",
                "Singapore",
                "Turkey",
                "UCT",
                "Universal",
                "US/Alaska",
                "US/Aleutian",
                "US/Arizona",
                "US/Central",
                "US/Eastern",
                "US/East-Indiana",
                "US/Hawaii",
                "US/Indiana-Starke",
                "US/Michigan",
                "US/Mountain",
                "US/Pacific",
                "US/Samoa",
                "UTC",
                "WET",
                "W-SU",
                "Zulu"
            ],
            "Default": "US/Eastern"
        }, 
        "Domain": {
            "Description": "Fully Qualified Domain Name under which app is to be hosted.",
            "Type": "String",
            "AllowedPattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.){2,}([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]){2,}$",
            "Default": "www.uipath-orchestrator-quickstart.com",
            "ConstraintDescription" : "Should be a fully qualified domain name"
        },
        "HAAUser": {
            "Description": "High Availability Add-on username.",
            "Type": "String",
            "Default": "test@corp.com"
        },
        "HAAPassword": {
            "Description": "High Availability Add-on password.",
            "Type": "String",
            "Default": "123456",
            "NoEcho": "true"
        }, 
        "HAALicense": {
            "Description": "license key, purchased from UIPath, to be used with optional High Availability Add-on.",
            "Type": "String",
            "Default": "2353tgewsdfweg34t342rftg23g2g23t2r32r2353tgewsdfweg34t342rftg23g2g23t2r32r2353tgewsdfweg34t342rftg23g2g23t2r32r2353tgewsdfweg34t342rftg23g2g23t2r32r"
        },    
        "RDSDBName": {
            "Description": "Name for UIPath Database to be created.",
            "Type": "String",
            "Default": "uipathdb"
        },         
        "RDSAllocatedStorage": {
            "Description": "Storage amount to be allocated to RDS DB Instance.",
            "Type": "String",
            "Default": "100"
        },
        "RDSUsername": {
            "Description": "Username to be used to log on to Database.",
            "Type": "String",
            "Default": "devtestaws"
        },
        "RDSPassword": {
            "Description": "Password to be used to log on to Database.",
            "Type": "String",
            "NoEcho": "true",
            "Default": "!Aw3s0m3Orch35tr4t0r"
        },  
        "OrchestratorVersion": {
            "Description": "UIPath Orchestrator Version to be installed.",
            "Type": "String",
            "Default": "19.10.15"
        },
        "OrchestratorInstanceCount": {
            "Description": "Desired Capacity (instance count) for Orchestrator instances.",
            "Type": "String",
            "Default": "1"
        },                 
        "OrchestratorLicense": {
            "Description": "License key, purchased from UIPath, to be used with Orchestrator.",
            "Type": "String",
            "Default": "DSGFSFGAGEHTERSEGW$%^%YHFDHDFHTTYJTKDGVXCFHGDSFSHJHMHKDGDFHYHFDHDFHTTYJTKDGVXCFHGDSFSHJHMHKDGDFHYHFDHDFHTTYJTKDGVXCFHGDSFSHJHMHKDGDFH+ADAAdwBvACEAJwAgADAAKAA="
        },         
        "OrchestratorPassPhrase": {
            "Description": "Orchestrator Passphrase in order to generate NuGet API keys, App encryption key and machine keys.",
            "Type": "String",
            "Default": "Aw3s0m3Orch35tr4t0r"
        }, 
        "OrchestratorPassword": {
            "Description": "Orchestrator Administrator password to login as.",
            "Type": "String",
            "NoEcho": "true",
            "Default": "123456@4dmin"
        }, 
        "AdminPassword": {
            "Description": "Windows Administrator password to login as.",
            "Type": "String",
            "NoEcho": "true",
            "Default": "Q123!w3s0m3Orch35tr4t0r"
        },                                                          
        "QSS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Description": "S3 bucket name hosting the Quickstart templates.",
            "Type": "String",
            "Default": "aws-partner-quickstart"
        },
        "QSS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-]*$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, and hyphens (-).",
            "Default": "templates",
            "Description": "S3 key prefix under which Quick Start templates are hosted.",
            "Type": "String"
        }
    },
    "Conditions": {
        "2AZCondition": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "NumberOfAZs"
                        },
                        "2"
                    ]
                },
                {
                    "Condition": "3AZCondition"
                }
            ]
        }, 
        "3AZCondition": {
            "Fn::Equals": [
                {
                    "Ref": "NumberOfAZs"
                },
                "3"
            ]
        }                                                      
    },    
    "Resources": {
        "NetworkStack": {
            "Type" : "AWS::CloudFormation::Stack",
            "Condition": "2AZCondition",
            "Properties" : {
                "TemplateURL" : {"Fn::Join": ["/", ["https:", "",
                                    {"Fn::Join": [".", [ {"Ref": "QSS3BucketName"}, "s3", {"Ref": "AWS::Region"}, "amazonaws", "com" ]]},
                                    {"Ref": "QSS3KeyPrefix"}, "network.template.json" ]]},
                "Parameters" : {
                    "AvailabilityZones": {"Fn::Join": [",", {"Ref": "AvailabilityZones"} ]},
                    "NumberOfAZs": {"Ref": "NumberOfAZs"},
                    "VPCCIDR": {"Ref": "VPCCIDR"},
                    "PublicSubnetTag1": {"Ref": "PublicSubnetTag1"},
                    "PublicSubnetTag2": {"Ref": "PublicSubnetTag2"},
                    "PublicSubnetTag3": {"Ref": "PublicSubnetTag3"},
                    "PrivateSubnetTag1": {"Ref": "PrivateSubnetTag1"},
                    "PrivateSubnetTag2": {"Ref": "PrivateSubnetTag2"},
                    "PrivateSubnetTag3": {"Ref": "PrivateSubnetTag3"}                                         
                }
            }
        },
        "SecurityStack": {
            "Type" : "AWS::CloudFormation::Stack",
            "Condition": "2AZCondition",
            "Properties" : {
                "TemplateURL" : {"Fn::Join": ["/", ["https:", "",
                                    {"Fn::Join": [".", [ {"Ref": "QSS3BucketName"}, "s3", {"Ref": "AWS::Region"}, "amazonaws", "com" ]]},
                                    {"Ref": "QSS3KeyPrefix"}, "security.template.json" ]]},
                "Parameters" : {
                    "VPCID": { "Fn::GetAtt" : ["NetworkStack", "Outputs.VPCID"] },
                    "VPCCIDR": {"Ref": "VPCCIDR"},
                    "StorageBucket": {"Ref": "StorageBucket"}                                      
                }
            }
        },
        "FindAMIFunction": {
            "Type": "AWS::Lambda::Function",
            "Condition": "2AZCondition",
            "Properties": {
                "Description" : "Finds a matching AMI Id",
                "Handler": "index.handler",
                "Role": { "Fn::GetAtt" : ["SecurityStack", "Outputs.CustomLambdaRoleArn"] },
                "Code": {
                    "ZipFile" : { "Fn::Join" : ["\n", [
                        "import boto3",
                        "import json",
                        "import cfnresponse",
                        "def create(properties, physical_id):",
                        "    regionName = properties['RegionName']",
                        "    imageName = properties['ImageName']",
                        "    architecture = properties['Architecture']",
                        "    virtualizationType = properties['VirtualizationType']",
                        "    owners = properties['Owners']",
                        "    imageId = ''",
                        "    ec2 = boto3.client('ec2', regionName)",
                        "    images = ec2.describe_images(",
                        "        ExecutableUsers=['all'],",
                        "        Filters=[",
                        "            { 'Name': 'name', 'Values': [imageName] },",
                        "            { 'Name': 'state', 'Values': ['available'] },",
                        "            { 'Name': 'architecture', 'Values': [architecture] },",
                        "            { 'Name': 'virtualization-type', 'Values': [virtualizationType] }",
                        "        ],",
                        "        Owners=[owners]",
                        "    )['Images']",
                        "    if len(images) > 0:",
                        "        imageId = images[0]['ImageId']",
                        "    print(regionName, imageId)",
                        "    returnAttribute = {}",
                        "    returnAttribute['ImageId'] = imageId",
                        "    returnAttribute['Action'] = 'CREATE'",
                        "    return cfnresponse.SUCCESS, imageId, returnAttribute",
                        "def update(properties, physical_id):",
                        "    imageId = physical_id",
                        "    returnAttribute = {}",
                        "    returnAttribute['ImageId'] = imageId",
                        "    returnAttribute['Action'] = 'UPDATE'",
                        "    return cfnresponse.SUCCESS, imageId, returnAttribute",
                        "def delete(properties, physical_id):",
                        "    imageId = physical_id",
                        "    returnAttribute = {}",
                        "    returnAttribute['ImageId'] = imageId",
                        "    returnAttribute['Action'] = 'DELETE'",
                        "    return cfnresponse.SUCCESS, imageId, returnAttribute",                        
                        "def handler(event, context):",
                        "    print('Received event: ' + json.dumps(event))",
                        "    status = cfnresponse.FAILED",
                        "    new_physical_id = None",
                        "    returnAttribute = {}",
                        "    try:",
                        "        properties = event.get('ResourceProperties')",
                        "        physical_id = event.get('PhysicalResourceId')",
                        "        status, new_physical_id, returnAttribute = {",
                        "            'Create': create,",
                        "            'Update': update,",
                        "            'Delete': delete",
                        "        }.get(event['RequestType'], lambda x, y: (cfnresponse.FAILED, None))(properties, physical_id)",
                        "    except Exception as e:",
                        "        print('Exception: ' + str(e))",
                        "        status = cfnresponse.FAILED",
                        "    finally:",
                        "        cfnresponse.send(event, context, status, returnAttribute, new_physical_id)"
                    ]]}
                },
                "Runtime": "python3.6",
                "Timeout": 30,
                "TracingConfig": {
                    "Mode": "Active"
                }
            }
        },        
        "StorageStack": {
            "Type" : "AWS::CloudFormation::Stack",
            "Condition": "2AZCondition",
            "Properties" : {
                "TemplateURL" : {"Fn::Join": ["/", ["https:", "",
                                    {"Fn::Join": [".", [ {"Ref": "QSS3BucketName"}, "s3", {"Ref": "AWS::Region"}, "amazonaws", "com" ]]},
                                    {"Ref": "QSS3KeyPrefix"}, "storage.template.json" ]]},
                "Parameters" : {
                    "StorageBucketARN": { "Fn::GetAtt" : ["SecurityStack", "Outputs.StorageBucketARN"] },
                    "SubnetIDs": { "Fn::GetAtt" : ["NetworkStack", "Outputs.PublicSubnetIDs"] },
                    "GatewaySecurityGroup": { "Fn::GetAtt" : ["SecurityStack", "Outputs.SecurityGroup"] },
                    "FileShareIAMRole": { "Fn::GetAtt" : ["SecurityStack", "Outputs.FileShareIAMRole"] },
                    "KeyPairName": {"Ref": "KeyPairName"},
                    "GatewayName": {"Ref": "GatewayName"},
                    "GatewayTimezone": {"Ref": "GatewayTimezone"},
                    "CustomLambdaRoleArn": { "Fn::GetAtt" : ["SecurityStack", "Outputs.CustomLambdaRoleArn"] }
                }
            }
        },
        "RoutingStack": {
            "Type" : "AWS::CloudFormation::Stack",
            "Condition": "2AZCondition",
            "Properties" : {
                "TemplateURL" : {"Fn::Join": ["/", ["https:", "",
                                    {"Fn::Join": [".", [ {"Ref": "QSS3BucketName"}, "s3", {"Ref": "AWS::Region"}, "amazonaws", "com" ]]},
                                    {"Ref": "QSS3KeyPrefix"}, "routing.template.json" ]]},
                "Parameters" : {
                    "VPCID": { "Fn::GetAtt" : ["NetworkStack", "Outputs.VPCID"] },
                    "GatewaySecurityGroup": { "Fn::GetAtt" : ["SecurityStack", "Outputs.SecurityGroup"] },
                    "SubnetIDs": { "Fn::GetAtt" : ["NetworkStack", "Outputs.PublicSubnetIDs"] },
                    "Domain": {"Ref": "Domain"},
                    "CustomLambdaRoleArn": { "Fn::GetAtt" : ["SecurityStack", "Outputs.CustomLambdaRoleArn"] }
                }
            }
        },
        "HAStack": {
            "Type" : "AWS::CloudFormation::Stack",
            "Condition": "2AZCondition",
            "Properties" : {
                "TemplateURL" : {"Fn::Join": ["/", ["https:", "",
                                    {"Fn::Join": [".", [ {"Ref": "QSS3BucketName"}, "s3", {"Ref": "AWS::Region"}, "amazonaws", "com" ]]},
                                    {"Ref": "QSS3KeyPrefix"}, "ha.template.json" ]]},
                "Parameters" : {
                    "SubnetIDs": { "Fn::GetAtt" : ["NetworkStack", "Outputs.PrivateSubnetIDs"] },
                    "GatewaySecurityGroup": { "Fn::GetAtt" : ["SecurityStack", "Outputs.SecurityGroup"] },
                    "KeyPairName": {"Ref": "KeyPairName"},
                    "HAAUser": {"Ref": "HAAUser"},
                    "HAAPassword": {"Ref": "HAAPassword"},
                    "HAALicense": {"Ref": "HAALicense"},
                    "FindAMIFunctionArn": { "Fn::GetAtt" : ["FindAMIFunction", "Arn"] }
                }
            }
        },
        "DatabaseStack": {
            "Type" : "AWS::CloudFormation::Stack",
            "Condition": "2AZCondition",
            "Properties" : {
                "TemplateURL" : {"Fn::Join": ["/", ["https:", "",
                                    {"Fn::Join": [".", [ {"Ref": "QSS3BucketName"}, "s3", {"Ref": "AWS::Region"}, "amazonaws", "com" ]]},
                                    {"Ref": "QSS3KeyPrefix"}, "database.template.json" ]]},
                "Parameters" : {
                    "SubnetIDs": { "Fn::GetAtt" : ["NetworkStack", "Outputs.PrivateSubnetIDs"] },
                    "GatewaySecurityGroup": { "Fn::GetAtt" : ["SecurityStack", "Outputs.SecurityGroup"] },
                    "RDSDBName": {"Ref": "RDSDBName"},
                    "RDSAllocatedStorage": {"Ref": "RDSAllocatedStorage"},
                    "RDSUsername": {"Ref": "RDSUsername"},
                    "RDSPassword": {"Ref": "RDSPassword"}
                }
            }
        },
        "ServerStack": {
            "Type" : "AWS::CloudFormation::Stack",
            "Condition": "2AZCondition",
            "Properties" : {
                "TemplateURL" : {"Fn::Join": ["/", ["https:", "",
                                    {"Fn::Join": [".", [ {"Ref": "QSS3BucketName"}, "s3", {"Ref": "AWS::Region"}, "amazonaws", "com" ]]},
                                    {"Ref": "QSS3KeyPrefix"}, "server.template.json" ]]},
                "Parameters" : {
                    "PrivateSubnetIDs": { "Fn::GetAtt" : ["NetworkStack", "Outputs.PrivateSubnetIDs"] },
                    "PublicSubnetIDs": { "Fn::GetAtt" : ["NetworkStack", "Outputs.PublicSubnetIDs"] },
                    "TargetGroupARN": { "Fn::GetAtt" : ["RoutingStack", "Outputs.TargetGroupARN"] },
                    "GatewaySecurityGroup": { "Fn::GetAtt" : ["SecurityStack", "Outputs.SecurityGroup"] },
                    "KeyPairName": {"Ref": "KeyPairName"},
                    "InstanceType": {"Ref": "InstanceType"},
                    "FindAMIFunctionArn": { "Fn::GetAtt" : ["FindAMIFunction", "Arn"] },
                    "OrchestratorVersion": {"Ref": "OrchestratorVersion"},
                    "OrchestratorInstanceCount": {"Ref": "OrchestratorInstanceCount"},
                    "OrchestratorLicense": {"Ref": "OrchestratorLicense"},
                    "OrchestratorPassPhrase": {"Ref": "OrchestratorPassPhrase"},
                    "OrchestratorPassword": {"Ref": "OrchestratorPassword"},
                    "AdminPassword": {"Ref": "AdminPassword"},
                    "DatabaseServerName": { "Fn::GetAtt" : ["DatabaseStack", "Outputs.RDSDBInstanceEndpointAddress"] },
                    "DatabaseName": {"Ref": "RDSDBName"},
                    "DatabaseUsername": {"Ref": "RDSUsername"},
                    "DatabasePassword": {"Ref": "RDSPassword"},
                    "StorageBucket": {"Ref": "StorageBucket"},
                    "GatewayPrivateIP": { "Fn::GetAtt" : ["StorageStack", "Outputs.GatewayVMPrivateIP1"] },
                    "HAMasterPrivateIP": { "Fn::GetAtt" : ["HAStack", "Outputs.HAMasterPrivateIP" ] },
                    "HASlavePrivateIP": { "Fn::GetAtt" : ["HAStack", "Outputs.HASlave1PrivateIP" ] },
                    "HAAPassword": {"Ref": "HAAPassword"}
                }
            }
        }                                                        
    },
    "Outputs": {
        "VPCID" : {
            "Description" : "VPC ID",
            "Value": { "Fn::GetAtt" : ["NetworkStack", "Outputs.VPCID"] },
            "Export" : {"Name" : {"Fn::Sub": "${AWS::StackName}-VPCID" }}
        },        
        "VPCCIDR" : {
            "Description" : "VPC CIDR",
            "Value": { "Fn::GetAtt" : ["NetworkStack", "Outputs.VPCCIDR"] },
            "Export" : {"Name" : {"Fn::Sub": "${AWS::StackName}-VPCCIDR" }}
        },   
        "PrivateSubnetIDs" : {
            "Description" : "Private Subnet IDs",
            "Value": { "Fn::GetAtt" : ["NetworkStack", "Outputs.PrivateSubnetIDs"] },
            "Export" : {"Name" : {"Fn::Sub": "${AWS::StackName}-PrivateSubnetIDs" }}
        },
        "PublicSubnetIDs" : {
            "Description" : "Public Subnet IDs",
            "Value": { "Fn::GetAtt" : ["NetworkStack", "Outputs.PublicSubnetIDs"] },
            "Export" : {"Name" : {"Fn::Sub": "${AWS::StackName}-PublicSubnetIDs" }}
        },                         
        "S3VPCEndpoint": {
            "Description": "S3 VPC Endpoint",
            "Value": { "Fn::GetAtt" : ["NetworkStack", "Outputs.S3VPCEndpoint"] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-S3VPCEndpoint" }
            }
        },
        "StorageBucketARN": {
            "Description": "Storage Bucket ARN",
            "Value": { "Fn::GetAtt" : ["SecurityStack", "Outputs.StorageBucketARN"] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-StorageBucketARN" }
            }
        },        
        "SecurityGroup": {
            "Description": "Security Group allowing access to WindowsRM from anywhere",
            "Value": { "Fn::GetAtt" : ["SecurityStack", "Outputs.SecurityGroup"] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-SecurityGroup" }
            }
        },
        "FileShareIAMRole" : {
            "Description" : "IAM Role providing S3 Access to Storage Gateway",
            "Value": { "Fn::GetAtt" : ["SecurityStack", "Outputs.FileShareIAMRole"] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-FileShareIAMRole" }
            }
        },
        "FileShareIAMPolicy": {
            "Description": "Storage Gateway IAM Policy",
            "Value": { "Fn::GetAtt" : ["SecurityStack", "Outputs.FileShareIAMPolicy"] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-FileShareIAMPolicy" }
            }
        },
        "GatewayVMID1": {
            "Description": "ID of Gateway VM in Public Subnet 1",
            "Value": { "Fn::GetAtt" : ["StorageStack", "Outputs.GatewayVMID1"] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-GatewayVMID1" }
            }
        },
        "GatewayVMPublicIP1": {
            "Description": "Public IP of Gateway VM in Public Subnet 1",
            "Value": { "Fn::GetAtt" : ["StorageStack", "Outputs.GatewayVMPublicIP1"] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-GatewayVMPublicIP1" }
            }
        },
        "GatewayVMPrivateIP1": {
            "Description": "Private IP of Gateway VM in Public Subnet 1",
            "Value": { "Fn::GetAtt" : ["StorageStack", "Outputs.GatewayVMPrivateIP1"] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-GatewayVMPrivateIP1" }
            }
        },        
        "GatewayARN1": {
            "Description": "ARN of Storage Gateway in Public Subnet 1",
            "Value": { "Fn::GetAtt" : ["StorageStack", "Outputs.GatewayARN1"] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-GatewayARN1" }
            }
        },
        "FileShareARN1": {
            "Description": "ARN of S3 File Share in Public Subnet 1",
            "Value": { "Fn::GetAtt" : ["StorageStack", "Outputs.GatewayARN1"] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-FileShareARN1" }
            }
        },
        "ApplicationLoadBalancer": {
            "Description": "Application Load Balancer Name",
            "Value": {"Fn::GetAtt" : ["RoutingStack", "Outputs.ApplicationLoadBalancer"]},
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-ApplicationLoadBalancer" }
            }            
        },     
        "TargetGroupName": {
            "Description": "Target Group Name",
            "Value": {"Fn::GetAtt" : ["RoutingStack", "Outputs.TargetGroupName"]},
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-TargetGroupName" }
            }            
        }, 
        "TargetGroupARN": {
            "Description": "Target Group ARN",
            "Value": {"Fn::GetAtt" : ["RoutingStack", "Outputs.TargetGroupARN"]},
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-TargetGroupARN" }
            }            
        },                         
        "HostedZoneID": {
            "Description": "Route53 Hosted Zone ID",
            "Value": {"Fn::GetAtt" : ["RoutingStack", "Outputs.HostedZoneID"]},
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-HostedZoneID" }
            }            
        },        
        "AWSCertificate": {
            "Description": "AWS Certificate Manager Certificate Resource",
            "Value": {"Fn::GetAtt" : ["RoutingStack", "Outputs.AWSCertificate"]},
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-AWSCertificate" }
            }            
        },
        "CertificateValidationRecordSet": {
            "Description": "Route53 CNAME Record",
            "Value": {"Fn::GetAtt" : ["RoutingStack", "Outputs.CertificateValidationRecordSet"]},
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-CertificateValidationRecordSet" }
            }            
        },        
        "HttpListener": {
            "Description": "HTTP Listener ARN",
            "Value": {"Fn::GetAtt" : ["RoutingStack", "Outputs.HttpListener"]},
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-HttpListener" }
            }            
        },
        "HttpsListener": {
            "Description": "HTTPS Listener ARN",
            "Value": {"Fn::GetAtt" : ["RoutingStack", "Outputs.HttpsListener"]},
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-HttpsListener" }
            }            
        },
        "RecordSet": {
            "Description": "Route53 A Record",
            "Value": {"Fn::GetAtt" : ["RoutingStack", "Outputs.RecordSet"]},
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-RecordSet" }
            }            
        },
        "HAMasterID": {
            "Description": "ID of HA Master VM in Private Subnet 1",
            "Value": {"Fn::GetAtt" : ["HAStack", "Outputs.HAMasterID"]},
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-HAMasterID" }
            }
        },
        "HAMasterPrivateIP": {            
            "Description": "Private IP of HA Master VM in Private Subnet 1",
            "Value": {"Fn::GetAtt" : ["HAStack", "Outputs.HAMasterPrivateIP" ] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-HAMasterPrivateIP" }
            }            
        }, 
        "HASlave1ID": {            
            "Description": "ID of HA Slave 1 VM in Private Subnet 1",
            "Value": {"Fn::GetAtt" : ["HAStack", "Outputs.HASlave1ID"]},
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-HASlave1ID" }
            }
        },
        "HASlave1PrivateIP": {            
            "Description": "Private IP of HA Slave 1 VM in Private Subnet 1",
            "Value": {"Fn::GetAtt" : ["HAStack", "Outputs.HASlave1PrivateIP" ] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-HASlave1PrivateIP" }
            }
        },  
        "HASlave2ID": {            
            "Description": "ID of HA Slave 2 VM in Private Subnet 1",
            "Value": {"Fn::GetAtt" : ["HAStack", "Outputs.HASlave2ID"]},
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-HASlave2ID" }
            }
        },
        "HASlave2PrivateIP": {            
            "Description": "Private IP of HA Slave 2 VM in Private Subnet 1",
            "Value": {"Fn::GetAtt" : ["HAStack", "Outputs.HASlave2PrivateIP" ] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-HASlave2PrivateIP" }
            }
        },
        "DBSubnetGroup": {
            "Description": "RDS-MSSQL private subnet group",
            "Value":  { "Fn::GetAtt" : ["DatabaseStack", "Outputs.DBSubnetGroup"] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-DBSubnetGroup" }
            }
        },
        "RDSDBInstanceID": {
            "Description": "RDS-MSSQL Database Instance ID",
            "Value":  { "Fn::GetAtt" : ["DatabaseStack", "Outputs.RDSDBInstanceID"] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-RDSDBInstanceID" }
            }            
        },
        "RDSDBInstanceEndpointAddress": {
            "Description": "RDS-MSSQL Database Instance Endpoint Address",
            "Value":  { "Fn::GetAtt" : ["DatabaseStack", "Outputs.RDSDBInstanceEndpointAddress"] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-RDSDBInstanceEndpointAddress" }
            }            
        },
        "RDSDBInstanceEndpointPort": {
            "Description": "RDS-MSSQL Database Instance Endpoint Port",
            "Value":  { "Fn::GetAtt" : ["DatabaseStack", "Outputs.RDSDBInstanceEndpointPort"] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-RDSDBInstanceEndpointPort" }
            }            
        },
        "LaunchTemplate": {
            "Description": "Launch configuration template",
            "Value": { "Fn::GetAtt" : ["ServerStack", "Outputs.LaunchTemplate"] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-LaunchTemplate" }
            }              
        }, 
        "AutoScalingGroup": {
            "Description": "Auto sclaing group",
            "Value": { "Fn::GetAtt" : ["ServerStack", "Outputs.AutoScalingGroup"] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-AutoScalingGroup" }
            }            
        },
        "ScaleUpAutoScalingPolicy": {
            "Description": "Auto scaling policy to scale up resources",
            "Value": { "Fn::GetAtt" : ["ServerStack", "Outputs.ScaleUpAutoScalingPolicy"] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-ScaleUpAutoScalingPolicy" }
            }              
        },
        "ScaleDownAutoScalingPolicy": {
            "Description": "Auto scaling policy to scale down resources",
            "Value": { "Fn::GetAtt" : ["ServerStack", "Outputs.ScaleDownAutoScalingPolicy"] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-ScaleDownAutoScalingPolicy" }
            }               
        },
        "HighMemoryAlarm": {
            "Description": "High memory usage alarm",
            "Value": { "Fn::GetAtt" : ["ServerStack", "Outputs.HighMemoryAlarm"] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-HighMemoryAlarm" }
            }             
        },
        "LowMemoryAlarm": {
            "Description": "Low memory usage alarm",
            "Value": { "Fn::GetAtt" : ["ServerStack", "Outputs.LowMemoryAlarm"] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-LowMemoryAlarm" }
            }            
        },
        "HighCPUAlarm": {
            "Description": "High cpu usage alarm",
            "Value": { "Fn::GetAtt" : ["ServerStack", "Outputs.HighCPUAlarm"] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-HighCPUAlarm" }
            }             
        },
        "LowCPUAlarm": {
            "Description": "Low cpu usage alarm",
            "Value": { "Fn::GetAtt" : ["ServerStack", "Outputs.LowCPUAlarm"] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-LowCPUAlarm" }
            }             
        },
        "BastionHostID": {
            "Description": "ID of BastionHost VM in Public Subnet 1",
            "Value": { "Fn::GetAtt" : ["ServerStack", "Outputs.BastionHostID"] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-BastionHostID" }
            }             
        },
        "BastionHostPrivateIP": {
            "Description": "Private IP of BastionHost in Public Subnet 1",
            "Value": { "Fn::GetAtt" : ["ServerStack", "Outputs.BastionHostPrivateIP"] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-BastionHostPrivateIP" }
            }             
        },   
        "BastionHostPublicIP": {
            "Description": "Private IP of BastionHost in Public Subnet 1",
            "Value": { "Fn::GetAtt" : ["ServerStack", "Outputs.BastionHostPublicIP"] },
            "Export": {
                "Name": { "Fn::Sub": "${AWS::StackName}-BastionHostPublicIP" }
            }             
        }                                                                                                           
    }
}