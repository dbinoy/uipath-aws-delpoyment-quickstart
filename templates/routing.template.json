{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template creates an Route53 Hosted zone and adds related record sets",
    "Parameters": {
		"VPCID": {
			"Type": "AWS::EC2::VPC::Id"
		},        
        "GatewaySecurityGroup": {
            "Description": "Security Group behind which Storage Gateway VMs would be placed",
            "Type": "String"
        },      
        "SubnetIDs": {
            "Description": "Comma separated Subnet IDs where Gateway VMs need to be launched",
            "Type": "String"
        },          
        "Domain": {
            "Description": "The domain to use to host the project. This should already exist as a hosted zone in Route 53.",
            "Type": "String",
            "Default": "corp.com"
        },
        "SubDomain": {
            "Description": "Application subdomain under the parent domain where the delpoyed app would be accessible.",
            "Type": "String",
            "Default": "app"
        },        
        "CustomLambdaRoleArn": {
            "Description": "ARN for IAM Role to be assumed by Lambda functinos creating Storage Gateway custom resources",
            "Type": "String"
        }                    
    },
    "Conditions": {
        "1AZCondition": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        { "Fn::Select" : [ "0", { "Fn::Split": [",", {"Ref": "SubnetIDs"}]}] },
                        "-"
                    ]
                }
            ]            
        },
        "2AZCondition": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        { "Fn::Select" : [ "1", { "Fn::Split": [",", {"Ref": "SubnetIDs"}]}] },
                        "-"
                    ]
                }
            ]            
        },
        "3AZCondition": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        { "Fn::Select" : [ "2", { "Fn::Split": [",", {"Ref": "SubnetIDs"}]}] },
                        "-"
                    ]
                }
            ]            
        }                
    },     
	"Resources": {
        "ApplicationLoadBalancer" : {
            "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties" : {
                "Name" : "UiPathStack-ALB",
                "Type" : "application",
                "Scheme" : "internet-facing",            
                "SecurityGroups" : [ {"Ref": "GatewaySecurityGroup"} ],
                "Subnets" : [
                    { "Fn::Select" : [ "0", { "Fn::Split": [",", {"Ref": "SubnetIDs"}]}] },
                    {
                        "Fn::If": [
                            "2AZCondition",
                            { "Fn::Select" : [ "1", { "Fn::Split": [",", {"Ref": "SubnetIDs"}]}] },
                            { "Ref": "AWS::NoValue" }
                        ]
                    },
                    {
                        "Fn::If": [
                            "3AZCondition",
                            { "Fn::Select" : [ "2", { "Fn::Split": [",", {"Ref": "SubnetIDs"}]}] },
                            { "Ref": "AWS::NoValue" }
                        ]
                    }
                ]                        
            }
        },
        "TargetGroup": {
            "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties" : {
                "Name" : "UiPathStack-ALB-target",
                "Port" : 443,
                "Protocol" : "HTTPS", 
                "VpcId" :  {"Ref": "VPCID"},      
                "TargetGroupAttributes" : [ 
                    { "Key" : "stickiness.enabled", "Value" : "true" },
                    { "Key" : "stickiness.type", "Value" : "lb_cookie" }
                ],  
                "TargetType" : "instance",
                "HealthCheckPath" : "/api/status",
                "HealthCheckPort" : "80",
                "HealthCheckProtocol" : "HTTP"
            }
        },
        "HostedZone": {
            "Type" : "AWS::Route53::HostedZone",
            "Properties" : {
                "Name" : {"Ref": "Domain"},
                "HostedZoneConfig" : {
                    "Comment": { "Fn::Join" : [" ", ["Hosted Zone for", {"Ref": "Domain"}]]}
                }
            }
        },
        "RequestAWSCertificateFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description" : "Requests issuance and validation of a new ACM certificate",
                "Handler": "index.handler",
                "Role": {"Ref" : "CustomLambdaRoleArn"},
                "Code": {
                    "ZipFile" : { "Fn::Join" : ["\n", [
                        "import json",
                        "import boto3",
                        "import time",
                        "import cfnresponse",
                        "acm = boto3.client('acm')",
                        "def create(properties, physical_id):",
                        "    domain = properties['DomainName']",
                        "    certResponse = acm.request_certificate(",
                        "        DomainName=domain,",
                        "        ValidationMethod='DNS'",
                        "    )",
                        "    arn = certResponse['CertificateArn']",
                        "    print(f'certificateArn = {arn}')",    
                        "    status = 'WAITING'",
                        "    certificateDetails = acm.describe_certificate(",
                        "        CertificateArn=arn",
                        "    )",
                        "    if 'Status' in certificateDetails['Certificate'].keys() and 'DomainName' in certificateDetails['Certificate'].keys():",
                        "        status = certificateDetails['Certificate']['Status']",
                        "    while status == 'WAITING':",
                        "        time.sleep(5)",
                        "        certificateDetails = acm.describe_certificate(",
                        "            CertificateArn=arn",
                        "        )",
                        "        if 'Status' in certificateDetails['Certificate'].keys() and 'DomainName' in certificateDetails['Certificate'].keys():",
                        "            status = certificateDetails['Certificate']['Status']",
                        "        print(status)",
                        "    dname = certificateDetails['Certificate']['DomainName']",
                        "    rname = certificateDetails['Certificate']['DomainValidationOptions'][0]['ResourceRecord']['Name']",
                        "    rval = certificateDetails['Certificate']['DomainValidationOptions'][0]['ResourceRecord']['Value']",
                        "    print(f'DomainName = {dname}')",
                        "    print(f'RecordName = {rname}')",
                        "    print(f'RecordValue = {rval}')",
                        "    rta = {}",
                        "    rta['DomainName'] = dname",
                        "    rta['RecordName'] = rname",
                        "    rta['RecordValue'] = rval",
                        "    rta['Action'] = 'CREATE'",
                        "    return cfnresponse.SUCCESS, arn, rta",  
                        "def update(properties, physical_id):",
                        "    arn = physical_id",
                        "    certificateDetails = acm.describe_certificate(",
                        "        CertificateArn=arn",
                        "    )",
                        "    dname = certificateDetails['Certificate']['DomainName']",
                        "    rname = certificateDetails['Certificate']['DomainValidationOptions'][0]['ResourceRecord']['Name']",
                        "    rval = certificateDetails['Certificate']['DomainValidationOptions'][0]['ResourceRecord']['Value']",
                        "    rta = {}",
                        "    rta['DomainName'] = dname",
                        "    rta['RecordName'] = rname",
                        "    rta['RecordValue'] = rval",
                        "    rta['Action'] = 'UPDATE'",
                        "    return cfnresponse.SUCCESS, arn, rta",  
                        "def delete(properties, physical_id):",
                        "    arn = physical_id",     
                        "    response = acm.delete_certificate(",
                        "        CertificateArn=arn",
                        "    )",
                        "    print(response)",
                        "    rta = {}",
                        "    rta['Action'] = 'DELETE'",
                        "    return cfnresponse.SUCCESS, arn, rta", 
                        "def handler(event, context):",
                        "    print('Received event: ' + json.dumps(event))",
                        "    status = cfnresponse.FAILED",
                        "    new_physical_id = None",
                        "    rta = {}",
                        "    try:",
                        "        properties = event.get('ResourceProperties')",
                        "        physical_id = event.get('PhysicalResourceId')",
                        "        status, new_physical_id, rta = {",
                        "            'Create': create,",
                        "            'Update': create,",
                        "            'Delete': delete",
                        "        }.get(event['RequestType'], lambda x, y: (cfnresponse.FAILED, None))(properties, physical_id)",
                        "    except Exception as e:",
                        "        print('Exception: ' + str(e))",
                        "        status = cfnresponse.FAILED",
                        "    finally:",
                        "        cfnresponse.send(event, context, status, rta, new_physical_id)"
                    ]]}
                },
                "Runtime": "python3.6",
                "Timeout": 30,
                "TracingConfig": {
                    "Mode": "Active"
                }
            }
        },    
		"RequestedAWSCertificate": {
            "Type": "Custom::RequestedAWSCertificate",
            "Properties": {
                    "ServiceToken": { "Fn::GetAtt" : ["RequestAWSCertificateFunction", "Arn"] },
                    "DomainName" : {"Ref": "Domain"}
            }
        },  
        "ValidateAWSCertificateFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description" : "Performs DNS based validation of issued ACM certificate",
                "Handler": "index.handler",
                "Role": {"Ref" : "CustomLambdaRoleArn"},
                "Code": {
                    "ZipFile" : { "Fn::Join" : ["\n", [
                        "import json",
                        "import boto3",
                        "import time",
                        "import cfnresponse",
                        "route53 = boto3.client('route53')",
                        "acm = boto3.client('acm')",
                        "def create(properties, physical_id):",
                        "    hostedZoneId = properties['HostedZoneId']",
                        "    recordName = properties['RecordName']",
                        "    recordValue = properties['RecordValue']",
                        "    recordType = properties['RecordType']",
                        "    arn = properties['CertificateArn']",
                        "    changeResponse = route53.change_resource_record_sets(",
                        "        HostedZoneId = hostedZoneId,",
                        "        ChangeBatch = {",
                        "            'Changes': [{",
                        "                'Action': 'UPSERT',",
                        "                'ResourceRecordSet': {",
                        "                    'Name': recordName,",
                        "                    'Type': recordType,",
                        "                    'TTL': 30,",
                        "                    'ResourceRecords': [{'Value': recordValue}]",
                        "                }",
                        "            }]",
                        "        }",
                        "    )",
                        "    print(f'{recordType} Upsert record for Hosted zone {hostedZoneId} submitted : {changeResponse[\"ChangeInfo\"][\"Id\"]}, Status: {changeResponse[\"ChangeInfo\"][\"Status\"]}')",                        
                        "    certificateDetails = acm.describe_certificate(",
                        "        CertificateArn=arn",
                        "    )",
                        "    status = certificateDetails['Certificate']['Status']",
                        "    while status != 'ISSUED':",
                        "        time.sleep(10)",
                        "        certificateDetails = acm.describe_certificate(",
                        "            CertificateArn=arn",
                        "        )",
                        "        status = certificateDetails['Certificate']['Status']",
                        "        if status != 'ISSUED':",                        
                        "            print(status)",
                        "    print(f'Certifcate {arn} Validated.')",
                        "    dname = certificateDetails['Certificate']['DomainName']",
                        "    rname = certificateDetails['Certificate']['DomainValidationOptions'][0]['ResourceRecord']['Name']",
                        "    rval = certificateDetails['Certificate']['DomainValidationOptions'][0]['ResourceRecord']['Value']",
                        "    rta = {}",
                        "    rta['DomainName'] = dname",
                        "    rta['RecordName'] = rname",
                        "    rta['RecordValue'] = rval",
                        "    rta['RecordType'] = 'CNAME'",                        
                        "    rta['Action'] = 'CREATE'",
                        "    return cfnresponse.SUCCESS, arn, rta",  
                        "def update(properties, physical_id):",
                        "    arn = physical_id",
                        "    certificateDetails = acm.describe_certificate(",
                        "        CertificateArn=arn",
                        "    )",
                        "    dname = certificateDetails['Certificate']['DomainName']",
                        "    rname = certificateDetails['Certificate']['DomainValidationOptions'][0]['ResourceRecord']['Name']",
                        "    rval = certificateDetails['Certificate']['DomainValidationOptions'][0]['ResourceRecord']['Value']",
                        "    rta = {}",
                        "    rta['DomainName'] = dname",
                        "    rta['RecordName'] = rname",
                        "    rta['RecordValue'] = rval",
                        "    rta['RecordType'] = 'CNAME'",                                              
                        "    rta['Action'] = 'UPDATE'",
                        "    return cfnresponse.SUCCESS, arn, rta",  
                        "def delete(properties, physical_id):",
                        "    arn = physical_id",  
                        "    hostedZoneId = properties['HostedZoneId']",
                        "    recordName = properties['RecordName']",
                        "    recordValue = properties['RecordValue']",
                        "    recordType = properties['RecordType']",
                        "    route53.change_resource_record_sets(",
                        "        HostedZoneId = hostedZoneId,",
                        "        ChangeBatch = {",
                        "            'Changes': [{",
                        "                'Action': 'DELETE',",
                        "                'ResourceRecordSet': {",
                        "                    'Name': recordName,",
                        "                    'Type': recordType,",
                        "                    'TTL': 30,",
                        "                    'ResourceRecords': [{'Value': recordValue}]",
                        "                }",
                        "            }]",
                        "        }",
                        "    )", 
                        "    rta = {}",
                        "    rta['Action'] = 'DELETE'",
                        "    return cfnresponse.SUCCESS, arn, rta", 
                        "def handler(event, context):",
                        "    print('Received event: ' + json.dumps(event))",
                        "    status = cfnresponse.FAILED",
                        "    new_physical_id = None",
                        "    rta = {}",
                        "    try:",
                        "        properties = event.get('ResourceProperties')",
                        "        physical_id = event.get('PhysicalResourceId')",
                        "        status, new_physical_id, rta = {",
                        "            'Create': create,",
                        "            'Update': create,",
                        "            'Delete': delete",
                        "        }.get(event['RequestType'], lambda x, y: (cfnresponse.FAILED, None))(properties, physical_id)",
                        "    except Exception as e:",
                        "        print('Exception: ' + str(e))",
                        "        status = cfnresponse.FAILED",
                        "    finally:",
                        "        cfnresponse.send(event, context, status, rta, new_physical_id)"
                    ]]}
                },
                "Runtime": "python3.6",
                "Timeout": 30,
                "TracingConfig": {
                    "Mode": "Active"
                }
            }
        },                
		"ValidatedAWSCertificate": {
            "Type": "Custom::ValidatedAWSCertificate",
            "Properties": {
                    "ServiceToken": { "Fn::GetAtt" : ["ValidateAWSCertificateFunction", "Arn"] },
                    "HostedZoneId" : {"Ref": "HostedZone"},
                    "CertificateArn" : {"Ref": "RequestedAWSCertificate"},
                    "RecordName" : {"Fn::GetAtt" : ["RequestedAWSCertificate", "RecordName"]},
                    "RecordValue" : {"Fn::GetAtt" : ["RequestedAWSCertificate", "RecordValue"]}
            }
        },                      
        "HttpListener": {
            "Type" : "AWS::ElasticLoadBalancingV2::Listener",
            "Properties" : {
                "LoadBalancerArn" : {"Ref": "ApplicationLoadBalancer"},
                "Port" : 80,
                "Protocol" : "HTTP",                
                "DefaultActions" : [ 
                    {
                        "Type" : "redirect",
                        "RedirectConfig" : {
                            "Port" : "443",
                            "Protocol" : "HTTPS",
                            "StatusCode" : "HTTP_301"
                        }                    
                    } 
                ]
            }
        }, 
        "HttpsListener": {
            "Type" : "AWS::ElasticLoadBalancingV2::Listener",
            "Properties" : {
                "LoadBalancerArn" : {"Ref": "ApplicationLoadBalancer"},
                "Port" : 443,
                "Protocol" : "HTTPS",                
                "DefaultActions" : [ 
                    {
                        "Type" : "forward",
                        "TargetGroupArn" : {"Ref": "TargetGroup"}                  
                    } 
                ],
                "SslPolicy": "ELBSecurityPolicy-2016-08",
                "Certificates" : [ 
                    {
                        "CertificateArn" : {"Ref": "ValidatedAWSCertificate"}
                    } 
                ]
            }
        },        
        "RecordSet": {
            "Type" : "AWS::Route53::RecordSet",
            "Properties" : {
                "HostedZoneId" : {"Ref" : "HostedZone"},
                "Name" : { "Fn::Join" : [".", [{"Ref": "SubDomain"}, {"Ref": "Domain"}]]},
                "Type" : "A",                
                "AliasTarget" : {
                    "EvaluateTargetHealth" : false,
                    "DNSName" : {"Fn::GetAtt" : ["ApplicationLoadBalancer", "DNSName"]},                    
                    "HostedZoneId" : {"Fn::GetAtt" : ["ApplicationLoadBalancer", "CanonicalHostedZoneID"]}
                }
            }
        }
    },
	"Outputs": {
        "ApplicationLoadBalancer": {
            "Value": {"Fn::GetAtt" : ["ApplicationLoadBalancer", "LoadBalancerFullName"]},
            "Description": "Application Load Balancer Name"
        },     
        "TargetGroupARN": {
            "Value": {"Ref" : "TargetGroup"},
            "Description": "Target Group Name"
        },         
        "TargetGroupName": {
            "Value": {"Fn::GetAtt" : ["TargetGroup", "TargetGroupFullName"]},
            "Description": "Target Group Name"
        },                 
        "HostedZoneID": {
            "Value": {"Ref" : "HostedZone"},
            "Description": "Route53 Hosted Zone ID"
        },        
        "AWSCertificate": {
            "Value":  {"Ref" : "ValidatedAWSCertificate"},
            "Description": "AWS Certificate Manager Certificate Resource"
        },      
        "HttpListener": {
            "Value":  {"Ref" : "HttpListener"},
            "Description": "HTTP Listener ARN"
        },
        "HttpsListener": {
            "Value":  {"Ref" : "HttpsListener"},
            "Description": "HTTPS Listener ARN"
        },
        "RecordSet": {
            "Value":  {"Ref" : "RecordSet"},
            "Description": "Route53 A Record"
        }                                                      					
	}     
}    